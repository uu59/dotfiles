# vim: set ft=zsh:

prompt_test2_setup () {
  # .zsh/functions
  . ${ZDOTDIR:-$HOME/.zsh}/functions

  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info
  zstyle ':vcs_info:*' max-exports 3
  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:*' formats '%b' '%R'
  # %m is expanded to empty string if hg-mg/stgit are unavailable
  zstyle ':vcs_info:*' actionformats '%b' '%R' ' %%F{189%}⚑ %a%%f'

  PROMPT2="%B%{%F{082%}%__> %b"

  add-zsh-hook precmd _test2_update_prompt
  add-zsh-hook precmd _test2_cleanup_hooks
}


_test2_cleanup_hooks () {
  if [ "$prompt_theme" != "test2" ];then
    add-zsh-hook -d precmd _test2_update_prompt
    add-zsh-hook -d precmd _test2_cleanup_hooks
  fi
}

_test2_update_prompt () {
  local left_prompt
  local right_prompt

  left_prompt+="%F{190%}%~%f "

  LANG=C vcs_info
  # 0: main
  # 1: git dir
  # 2: rebase/merge
  if [ -n "$vcs_info_msg_0_" ];then
    local gitdir=$vcs_info_msg_1_/.git
    [[ -f $gitdir ]] && gitdir="$(git rev-parse --git-dir)" # submodule
    () {
      local prompt_cache_file="$gitdir/prompt_${prompt_theme}.cache"
      local is_cache_fresh=1
      [[ ! -f $prompt_cache_file ]] && is_cache_fresh=0
      if [[ $is_cache_fresh -eq 1 ]];then
        setopt localoptions glob globsubst extendedglob no_nomatch
        for filepath in config index FETCH_HEAD "logs/**/*(N-.)"; do
          [[ $is_cache_fresh == 0 ]] && break
          for file in $gitdir/$filepath; do
            [[ $is_cache_fresh == 0 ]] && break
            [[ $file -nt $prompt_cache_file ]] && is_cache_fresh=0
          done
        done
      fi

      if [[ $is_cache_fresh -eq 1 ]];then
        left_prompt=$(< $prompt_cache_file)
        return
      fi

      local branch="$vcs_info_msg_0_"
      local branchinfo
      local upstream=$(__git_upstream "$branch")
      if [[ -n $upstream ]];then
        # distance between local..remote branches
        local distance=""
        local ahead="$(command git rev-list $upstream..$branch | wc -l | sed 's/ //g')" # sed for OSX
        if [[ $ahead -eq 0 ]];then
          local behind="$(command git rev-list $branch..$upstream | wc -l | sed 's/ //g')" # sed for OSX
          [[ $behind -gt 0 ]] && distance="[-${behind}]"
        else
          distance="[+${ahead}]"
        fi
        branchinfo=" -> $upstream ${distance}%F{248%} ($(__git_current_remote_url "$upstream"))%f"
      fi
      left_prompt+="%F{225%}__is_git_dirty%f%F{255%}${branch}%f${branchinfo}"
      if [[ -n $vcs_info_msg_2_ ]];then
        left_prompt+="${vcs_info_msg_2_}"
      fi
      echo -n $left_prompt > $prompt_cache_file
    }
  fi

  update_left_prompt() { # for readability of zprof
    local is_dirty
    if [[ -n $vcs_info_msg_0_ ]];then
      is_dirty=$(__is_git_dirty && printf "⚶  ")
    fi
    echo -n $'\n'
    left_prompt="${left_prompt/__is_git_dirty/${is_dirty}}"$'\n'
    if [[ -n $SSH_CONNECTION ]];then
      left_prompt+="%F{230%}$HOST%f "
    fi
    left_prompt+="%F{250%}%(!.#.$) %f"
    PROMPT="$left_prompt"
  }
  update_left_prompt

  update_right_prompt() {
    right_prompt+="%F{244%}ruby $(__ruby_version)%f"
    RPROMPT=$right_prompt
  }
  update_right_prompt
}


prompt_test2_setup "$@"
