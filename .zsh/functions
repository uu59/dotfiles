# vim: set fdm=marker ft=zsh:

# -- colorcheck() {{{

function colorcheck() {
  local FG=0
  local BG=0

  while getopts "fb" OPTION
  do
    case $OPTION in
      "f" ) FG=1 ;;
      "b" ) BG=1 ;;
      *   ) echo 'Usage: colorcheck [-f] [-b]'; return 0;
      ;;
    esac
  done

  if [ $FG = 0 -a $BG = 0 ];then
    FG=1;
    BG=1;
  fi

  if [ $FG = 1 ];then
    echo '\\033[0;38;05;XXXm Text \\033[0m'
    for color in `seq -f '%03g' 0 255`; do
      printf "\033[38;05;${color}m${color}\033[0m "
    done
    echo;
  fi

  if [ $BG = 1 ];then
    echo '\\033[48;05;XXXm Text \\033[0m'
    for color in `seq -f '%03g' 0 255`; do
      printf "\033[48;05;${color}m${color}\033[0m  "
    done
    echo;
  fi
}

# }}}

# -- webserver() {{{
function webserver() {
  local document_root="${1:-.}"
  if [ ! -d "$document_root" ];then
    echo "$document_root is not exists/directory" >&2
    return 1
  fi

  local port="${2:-9090}"
  local cmd=""
  if which python > /dev/null 2>&1 ;then
    # SimpleHTTPServer is better than ruby's one such as Content-Type handling
    if (python -V 2>&1 | grep -q -F "Python 2.") ;then
      cmd="(cd $document_root; python -m SimpleHTTPServer $port)"
    else
      # Python 3 has not SimpleHTTPServer
      cmd="(cd $document_root; python -m http.server $port)"
    fi
  elif which ruby > /dev/null 2>&1; then
    cmd="ruby -run -e httpd -- --port=$port $document_root"
  fi

  if [ -n "$cmd" ];then
    echo "DocumentRoot: $(cd ${document_root}; pwd) (port: ${port})"
    echo
    eval "$cmd"
  else
    echo "can't find python/ruby" >&2
  fi
}
# }}}

local _dir_=$(cd $(dirname $0); pwd)
if [ $+commands[percol] -ne 0 ];then
 source "$_dir_/percol/function"
fi

__current_ruby_version() {
  local version
  if [ $+commands[rbenv] -ne 0 ];then
    version=$(rbenv version-name)
  elif [ $+commands[rvm-prompt] -ne 0 ]; then
    version=$(rvm-prompt)
  elif [ $+commands[ruby] -ne 0 ] ;then
    version=$(ruby -e 'print %Q!#{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}!')
  fi
  echo $version
}

__ruby_version() {
  [[ $+commands[ruby] -eq 0 ]] && return

  local -a readlink
  case "${OSTYPE}" in
    linux*)
      readlink=(readlink -e)
      ;;
    darwin*)
      readlink=(readlink )
      ;;
  esac
  local ruby_path=$($readlink $(command -v ruby))
  local cache="${ZDOTDIR-$HOME}/.zsh/cache$ruby_path"
  [[ -f $cache ]] && echo $(< $cache) && return

  mkdir -p ${cache%/*}
  local ruby_ver
  if [ -n "$ruby_path" ];then
    : ${ruby_ver:="$(echo $ruby_path | grep -o -E '[0-9]\.[0-9]\.[0-9]-p[0-9]+')"}
    if [ -z "$ruby_ver" ];then
      if [ $+commands[ruby] -ne 0 ] ;then
        ruby_ver=$(ruby -e 'print %Q!#{RUBY_VERSION}-p#{RUBY_PATCHLEVEL}!')
      fi
    fi
  fi
  echo -n $ruby_ver > $cache
  echo $ruby_ver
}

__is_inside_git() {
  (([ -n "$vcs_info_msg_0_" ] || command git rev-parse --is-inside-work-tree &>/dev/null) && return 0) || return 1
}

__is_git_dirty() {
  __is_inside_git || return 1
  # https://gist.github.com/sindresorhus/3898739
  # https://github.com/sindresorhus/pure/blob/master/prompt.zsh

  # following line can't detect untracked files (but fast on huge repository)
  # \git diff --quiet --ignore-submodules HEAD 2> /dev/null

  ( git diff --quiet --ignore-submodules HEAD 2>/dev/null ) || return 0

  # looks clean, but check untracked file
  if [ -z "$(git clean -dn)" ];then
    return 1
  else
    return 0
  fi
}

__git_upstream() {
  __is_inside_git || return
  local branch
  if [[ -n $1 ]];then
    branch="refs/heads/$1"
  else
    branch="$(git symbolic-ref HEAD 2>/dev/null)}"
  fi
  [[ -z $branch ]] && return
  git for-each-ref --format='%(upstream:short)' $branch 2>/dev/null
  # below line required newer git:
  # git rev-parse --abbrev-ref @{u} 2>/dev/null
}

__git_current_remote_url() {
  __is_inside_git || return
  if [[ -n $1 ]];then
    local upstream="$1"
  else
    local upstream=$(__git_upstream)
  fi
  local remote=${upstream%%/*}
  [[ -n $remote ]] && remote=$(git config remote.$remote.url)
  echo $remote
}
